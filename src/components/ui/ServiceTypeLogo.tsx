import React from 'react'
import { Box, Typography } from '@mui/material'
import { COLORS } from '../../constants/colors'
import TYPOGRAPHY from '../../constants/typography'

// SVG Icons for each service type
const StethoscopeIcon: React.FC<{ color: string; size: number }> = ({ color, size }) => (
  <svg width={size} height={size} viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path 
      d="M10.2312 7.75C10.2312 7.87979 10.1927 8.00667 10.1206 8.11459C10.0485 8.22251 9.946 8.30663 9.82609 8.3563C9.70617 8.40597 9.57422 8.41896 9.44692 8.39364C9.31962 8.36832 9.20269 8.30582 9.11091 8.21404C9.01913 8.12226 8.95663 8.00533 8.93131 7.87803C8.90599 7.75073 8.91899 7.61878 8.96866 7.49886C9.01833 7.37895 9.10244 7.27646 9.21036 7.20435C9.31828 7.13224 9.44516 7.09375 9.57495 7.09375C9.749 7.09375 9.91592 7.16289 10.039 7.28596C10.1621 7.40903 10.2312 7.57595 10.2312 7.75ZM9.98237 9.89867C9.88627 10.5182 9.57199 11.083 9.09618 11.4912C8.62038 11.8994 8.01437 12.1242 7.38745 12.125H6.07495C5.37898 12.1243 4.71172 11.8475 4.2196 11.3554C3.72747 10.8632 3.45068 10.196 3.44995 9.5V7.28461C2.60423 7.17806 1.82645 6.76653 1.2626 6.12726C0.698739 5.48798 0.387558 4.66491 0.387451 3.8125V1.1875C0.387451 1.07147 0.433545 0.960188 0.515592 0.878141C0.597639 0.796094 0.708919 0.75 0.824951 0.75H2.13745C2.25348 0.75 2.36476 0.796094 2.44681 0.878141C2.52886 0.960188 2.57495 1.07147 2.57495 1.1875C2.57495 1.30353 2.52886 1.41481 2.44681 1.49686C2.36476 1.57891 2.25348 1.625 2.13745 1.625H1.26245V3.8125C1.26242 4.16018 1.33146 4.50441 1.46556 4.82519C1.59966 5.14598 1.79616 5.43692 2.04363 5.68114C2.2911 5.92536 2.58463 6.11798 2.90716 6.24782C3.22969 6.37766 3.5748 6.44214 3.92245 6.4375C5.35034 6.41891 6.51245 5.2207 6.51245 3.76711V1.625H5.63745C5.52142 1.625 5.41014 1.57891 5.32809 1.49686C5.24604 1.41481 5.19995 1.30353 5.19995 1.1875C5.19995 1.07147 5.24604 0.960188 5.32809 0.878141C5.41014 0.796094 5.52142 0.75 5.63745 0.75H6.94995C7.06598 0.75 7.17726 0.796094 7.25931 0.878141C7.34136 0.960188 7.38745 1.07147 7.38745 1.1875V3.76711C7.38745 5.56305 6.04597 7.06422 4.32495 7.28406V9.5C4.32495 9.96413 4.50933 10.4092 4.83751 10.7374C5.1657 11.0656 5.61082 11.25 6.07495 11.25H7.38745C7.78486 11.2493 8.17025 11.1137 8.48046 10.8653C8.79067 10.6169 9.00728 10.2705 9.0948 9.88281C8.56642 9.76413 8.10086 9.45367 7.78818 9.01152C7.4755 8.56937 7.33795 8.02696 7.40213 7.48924C7.46631 6.95152 7.72767 6.45672 8.13562 6.10058C8.54358 5.74444 9.06914 5.55229 9.6106 5.5613C10.1521 5.5703 10.6709 5.77984 11.0668 6.14934C11.4627 6.51886 11.7075 7.02208 11.7537 7.56163C11.8 8.10119 11.6445 8.63873 11.3172 9.07023C10.99 9.50174 10.5144 9.79653 9.98237 9.89758V9.89867ZM10.8875 7.75C10.8875 7.49041 10.8105 7.23665 10.6663 7.02081C10.522 6.80498 10.3171 6.63675 10.0772 6.53741C9.83739 6.43807 9.57349 6.41208 9.31889 6.46272C9.06429 6.51336 8.83043 6.63837 8.64687 6.82192C8.46332 7.00548 8.33831 7.23934 8.28767 7.49394C8.23703 7.74854 8.26302 8.01244 8.36236 8.25227C8.4617 8.4921 8.62993 8.69708 8.84577 8.8413C9.06161 8.98552 9.31536 9.0625 9.57495 9.0625C9.92305 9.0625 10.2569 8.92422 10.503 8.67808C10.7492 8.43194 10.8875 8.0981 10.8875 7.75Z" 
      fill={color}
    />
  </svg>
)

const VirusIcon: React.FC<{ color: string; size: number }> = ({ color, size }) => (
  <svg width={size} height={size} viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path 
      d="M7.63745 5.90625C7.63745 5.6034 7.54764 5.30735 7.37939 5.05553C7.21113 4.80372 6.97198 4.60746 6.69218 4.49156C6.41239 4.37566 6.1045 4.34534 5.80747 4.40442C5.51044 4.46351 5.23759 4.60934 5.02344 4.82349C4.80929 5.03764 4.66346 5.31048 4.60437 5.60752C4.54529 5.90455 4.57561 6.21243 4.69151 6.49223C4.80741 6.77203 5.00367 7.01118 5.25548 7.17944C5.5073 7.34769 5.80335 7.4375 6.1062 7.4375C6.51231 7.4375 6.90179 7.27617 7.18896 6.98901C7.47612 6.70184 7.63745 6.31236 7.63745 5.90625ZM6.1062 6.5625C5.97641 6.5625 5.84953 6.52401 5.74161 6.4519C5.63369 6.37979 5.54958 6.2773 5.49991 6.15739C5.45024 6.03747 5.43724 5.90552 5.46256 5.77822C5.48788 5.65092 5.55038 5.53399 5.64216 5.44221C5.73394 5.35043 5.85087 5.28793 5.97817 5.26261C6.10547 5.23729 6.23742 5.25028 6.35734 5.29995C6.47725 5.34962 6.57974 5.43374 6.65185 5.54166C6.72396 5.64958 6.76245 5.77646 6.76245 5.90625C6.76245 6.0803 6.69331 6.24722 6.57024 6.37029C6.44717 6.49336 6.28025 6.5625 6.1062 6.5625ZM9.82495 6.125C9.99801 6.125 10.1672 6.17632 10.3111 6.27246C10.455 6.36861 10.5671 6.50527 10.6333 6.66515C10.6996 6.82504 10.7169 7.00097 10.6831 7.1707C10.6494 7.34044 10.566 7.49635 10.4437 7.61872C10.3213 7.74109 10.1654 7.82443 9.99566 7.85819C9.82592 7.89195 9.64999 7.87462 9.4901 7.80839C9.33022 7.74217 9.19356 7.63002 9.09741 7.48612C9.00127 7.34223 8.94995 7.17306 8.94995 7C8.94995 6.76794 9.04214 6.54538 9.20623 6.38128C9.37033 6.21719 9.59289 6.125 9.82495 6.125ZM8.07495 9.625C8.07495 9.79806 8.02363 9.96723 7.92749 10.1111C7.83134 10.255 7.69468 10.3672 7.5348 10.4334C7.37491 10.4996 7.19898 10.5169 7.02925 10.4832C6.85951 10.4494 6.7036 10.3661 6.58123 10.2437C6.45886 10.1213 6.37553 9.96544 6.34176 9.7957C6.308 9.62597 6.32533 9.45004 6.39156 9.29015C6.45778 9.13027 6.56993 8.99361 6.71383 8.89746C6.85772 8.80132 7.02689 8.75 7.19995 8.75C7.43202 8.75 7.65458 8.84219 7.81867 9.00628C7.98276 9.17038 8.07495 9.39294 8.07495 9.625ZM13.325 6.5625H12.4314C12.3413 5.47531 11.9131 4.44359 11.2069 3.61211L11.8845 2.93453C11.9666 2.85244 12.0127 2.7411 12.0127 2.625C12.0127 2.5089 11.9666 2.39756 11.8845 2.31547C11.8024 2.23338 11.691 2.18726 11.575 2.18726C11.4589 2.18726 11.3475 2.23338 11.2654 2.31547L10.5906 2.99305C9.75835 2.28631 8.7256 1.8581 7.63745 1.76859V0.875C7.63745 0.758968 7.59136 0.647688 7.50931 0.565641C7.42726 0.483594 7.31598 0.4375 7.19995 0.4375C7.08392 0.4375 6.97264 0.483594 6.89059 0.565641C6.80855 0.647688 6.76245 0.758968 6.76245 0.875V1.76859C5.67526 1.85866 4.64354 2.28683 3.81206 2.99305L3.13448 2.31547C3.05239 2.23338 2.94105 2.18726 2.82495 2.18726C2.70885 2.18726 2.59751 2.23338 2.51542 2.31547C2.43333 2.39756 2.38721 2.5089 2.38721 2.625C2.38721 2.7411 2.43333 2.85244 2.51542 2.93453L3.193 3.61211C2.48626 4.44433 2.05805 5.47709 1.96854 6.56523H1.07495C0.958919 6.56523 0.847639 6.61133 0.765592 6.69338C0.683545 6.77542 0.637451 6.8867 0.637451 7.00273C0.637451 7.11877 0.683545 7.23005 0.765592 7.31209C0.847639 7.39414 0.958919 7.44023 1.07495 7.44023H1.96854C2.05861 8.52743 2.48678 9.55914 3.193 10.3906L2.51542 11.0655C2.43333 11.1476 2.38721 11.2589 2.38721 11.375C2.38721 11.4911 2.43333 11.6024 2.51542 11.6845C2.59751 11.7666 2.70885 11.8127 2.82495 11.8127C2.94105 11.8127 3.05239 11.7666 3.13448 11.6845L3.81206 11.007C4.64428 11.7137 5.67704 12.1419 6.76519 12.2314V13.125C6.76519 13.241 6.81128 13.3523 6.89333 13.4344C6.97537 13.5164 7.08665 13.5625 7.20269 13.5625C7.31872 13.5625 7.43 13.5164 7.51204 13.4344C7.59409 13.3523 7.64019 13.241 7.64019 13.125V12.2314C8.72738 12.1413 9.7591 11.7132 10.5906 11.007L11.2682 11.6845C11.3502 11.7666 11.4616 11.8127 11.5777 11.8127C11.6938 11.8127 11.8051 11.7666 11.8872 11.6845C11.9693 11.6024 12.0154 11.4911 12.0154 11.375C12.0154 11.2589 11.9693 11.1476 11.8872 11.0655L11.2069 10.3906C11.9136 9.5584 12.3419 8.52565 12.4314 7.4375H13.325C13.441 7.4375 13.5523 7.39141 13.6343 7.30936C13.7164 7.22731 13.7625 7.11603 13.7625 7C13.7625 6.88397 13.7164 6.77269 13.6343 6.69064C13.5523 6.60859 13.441 6.5625 13.325 6.5625ZM7.19995 11.375C6.33466 11.375 5.4888 11.1184 4.76933 10.6377C4.04987 10.1569 3.48911 9.47367 3.15798 8.67424C2.82684 7.87481 2.74021 6.99515 2.90902 6.14648C3.07783 5.29781 3.4945 4.51826 4.10636 3.90641C4.71821 3.29455 5.49776 2.87787 6.34643 2.70906C7.1951 2.54025 8.07476 2.62689 8.87419 2.95803C9.67362 3.28916 10.3569 3.84992 10.8376 4.56938C11.3184 5.28885 11.575 6.13471 11.575 7C11.5736 8.15992 11.1123 9.27196 10.2921 10.0922C9.47192 10.9123 8.35987 11.3737 7.19995 11.375Z" 
      fill={color}
    />
  </svg>
)

const BrainIcon: React.FC<{ color: string; size: number }> = ({ color, size }) => (
  <svg width={size} height={size} viewBox="0 0 15 14" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path 
      d="M13.7624 6.7811C13.7619 6.20159 13.5972 5.63409 13.2875 5.14428C12.9778 4.65447 12.5357 4.26237 12.0124 4.01336V3.93735C12.0119 3.37364 11.83 2.82507 11.4935 2.3728C11.157 1.92053 10.6839 1.5886 10.1441 1.42611C9.6043 1.26363 9.02655 1.27922 8.49631 1.47058C7.96608 1.66195 7.51154 2.01892 7.19993 2.48868C6.88833 2.01892 6.43379 1.66195 5.90355 1.47058C5.37332 1.27922 4.79557 1.26363 4.25579 1.42611C3.716 1.5886 3.24287 1.92053 2.90638 2.3728C2.5699 2.82507 2.38794 3.37364 2.38743 3.93735V4.01336C1.86371 4.26169 1.42121 4.65354 1.11136 5.14338C0.801508 5.63322 0.637024 6.20094 0.637024 6.78055C0.637024 7.36016 0.801508 7.92788 1.11136 8.41772C1.42121 8.90756 1.86371 9.29941 2.38743 9.54774V9.62485C2.38794 10.1886 2.5699 10.7371 2.90638 11.1894C3.24287 11.6417 3.716 11.9736 4.25579 12.1361C4.79557 12.2986 5.37332 12.283 5.90355 12.0916C6.43379 11.9002 6.88833 11.5433 7.19993 11.0735C7.51154 11.5433 7.96608 11.9002 8.49631 12.0916C9.02655 12.283 9.6043 12.2986 10.1441 12.1361C10.6839 11.9736 11.157 11.6417 11.4935 11.1894C11.83 10.7371 12.0119 10.1886 12.0124 9.62485V9.54774C12.5356 9.29891 12.9777 8.90701 13.2874 8.41739C13.5971 7.92777 13.7618 7.36045 13.7624 6.7811ZM5.01243 11.3748C4.58092 11.3748 4.16464 11.2153 3.84356 10.927C3.52247 10.6387 3.31921 10.242 3.27282 9.81297C3.4143 9.83316 3.55702 9.84339 3.69993 9.8436H4.13743C4.25347 9.8436 4.36475 9.7975 4.44679 9.71546C4.52884 9.63341 4.57493 9.52213 4.57493 9.4061C4.57493 9.29007 4.52884 9.17878 4.44679 9.09674C4.36475 9.01469 4.25347 8.9686 4.13743 8.9686H3.69993C3.18344 8.9692 2.6834 8.78703 2.28833 8.45434C1.89326 8.12165 1.62865 7.6599 1.54135 7.15084C1.45405 6.64178 1.54969 6.11825 1.81134 5.67294C2.07299 5.22762 2.48377 4.88926 2.97095 4.71774C3.05619 4.68756 3.12999 4.63171 3.18219 4.55786C3.23438 4.48402 3.26242 4.39582 3.26243 4.30539V3.93735C3.26243 3.47322 3.44681 3.0281 3.775 2.69991C4.10319 2.37172 4.54831 2.18735 5.01243 2.18735C5.47656 2.18735 5.92168 2.37172 6.24987 2.69991C6.57806 3.0281 6.76243 3.47322 6.76243 3.93735V7.67032C6.28201 7.23822 5.65858 6.99937 5.01243 6.99985C4.8964 6.99985 4.78512 7.04594 4.70307 7.12799C4.62103 7.21003 4.57493 7.32132 4.57493 7.43735C4.57493 7.55338 4.62103 7.66466 4.70307 7.74671C4.78512 7.82875 4.8964 7.87485 5.01243 7.87485C5.47656 7.87485 5.92168 8.05922 6.24987 8.38741C6.57806 8.7156 6.76243 9.16072 6.76243 9.62485C6.76243 10.089 6.57806 10.5341 6.24987 10.8623C5.92168 11.1905 5.47656 11.3748 5.01243 11.3748ZM10.6999 8.9686H10.2624C10.1464 8.9686 10.0351 9.01469 9.95307 9.09674C9.87103 9.17878 9.82493 9.29007 9.82493 9.4061C9.82493 9.52213 9.87103 9.63341 9.95307 9.71546C10.0351 9.7975 10.1464 9.8436 10.2624 9.8436H10.6999C10.8428 9.84339 10.9856 9.83316 11.127 9.81297C11.0907 10.1491 10.9578 10.4675 10.7443 10.7297C10.5308 10.9919 10.246 11.1867 9.92417 11.2904C9.60238 11.3942 9.25742 11.4025 8.931 11.3143C8.60459 11.2262 8.31069 11.0454 8.08485 10.7938C7.85901 10.5422 7.71089 10.2305 7.6584 9.89652C7.60591 9.56251 7.6513 9.22045 7.78909 8.91169C7.92687 8.60294 8.15115 8.3407 8.4348 8.1567C8.71845 7.97269 9.04933 7.8748 9.38743 7.87485C9.50347 7.87485 9.61475 7.82875 9.69679 7.74671C9.77884 7.66466 9.82493 7.55338 9.82493 7.43735C9.82493 7.32132 9.77884 7.21003 9.69679 7.12799C9.61475 7.04594 9.50347 6.99985 9.38743 6.99985C8.74128 6.99937 8.11786 7.23822 7.63743 7.67032V3.93735C7.63743 3.47322 7.82181 3.0281 8.15 2.69991C8.47819 2.37172 8.92331 2.18735 9.38743 2.18735C9.85156 2.18735 10.2967 2.37172 10.6249 2.69991C10.9531 3.0281 11.1374 3.47322 11.1374 3.93735V4.30539C11.1374 4.39582 11.1655 4.48402 11.2177 4.55786C11.2699 4.63171 11.3437 4.68756 11.4289 4.71774C11.9161 4.88926 12.3269 5.22762 12.5885 5.67294C12.8502 6.11825 12.9458 6.64178 12.8585 7.15084C12.7712 7.6599 12.5066 8.12165 12.1115 8.45434C11.7165 8.78703 11.2164 8.9692 10.6999 8.9686ZM11.5749 6.12485C11.5749 6.24088 11.5288 6.35216 11.4468 6.43421C11.3647 6.51625 11.2535 6.56235 11.1374 6.56235H10.9187C10.3965 6.56235 9.89578 6.35493 9.52657 5.98571C9.15736 5.6165 8.94993 5.11574 8.94993 4.5936V4.37485C8.94993 4.25882 8.99603 4.14754 9.07807 4.06549C9.16012 3.98344 9.2714 3.93735 9.38743 3.93735C9.50347 3.93735 9.61475 3.98344 9.69679 4.06549C9.77884 4.14754 9.82493 4.25882 9.82493 4.37485V4.5936C9.82493 4.88368 9.94017 5.16188 10.1453 5.367C10.3504 5.57211 10.6286 5.68735 10.9187 5.68735H11.1374C11.2535 5.68735 11.3647 5.73344 11.4468 5.81549C11.5288 5.89754 11.5749 6.00882 11.5749 6.12485ZM3.48118 6.56235H3.26243C3.1464 6.56235 3.03512 6.51625 2.95307 6.43421C2.87103 6.35216 2.82493 6.24088 2.82493 6.12485C2.82493 6.00882 2.87103 5.89754 2.95307 5.81549C3.03512 5.73344 3.1464 5.68735 3.26243 5.68735H3.48118C3.77126 5.68735 4.04946 5.57211 4.25458 5.367C4.4597 5.16188 4.57493 4.88368 4.57493 4.5936V4.37485C4.57493 4.25882 4.62103 4.14754 4.70307 4.06549C4.78512 3.98344 4.8964 3.93735 5.01243 3.93735C5.12847 3.93735 5.23975 3.98344 5.32179 4.06549C5.40384 4.14754 5.44993 4.25882 5.44993 4.37485V4.5936C5.44993 5.11574 5.24251 5.6165 4.8733 5.98571C4.50409 6.35493 4.00333 6.56235 3.48118 6.56235Z" 
      fill={color}
    />
  </svg>
)

const MATIcon: React.FC<{ color: string; size: number }> = ({ color, size }) => (
  <svg width={size} height={size} viewBox="0 0 15 14" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path 
      d="M13.197 3.62772L10.572 1.00272C10.5313 0.962076 10.4831 0.929832 10.43 0.907833C10.3769 0.885834 10.3199 0.874512 10.2625 0.874512C10.205 0.874512 10.148 0.885834 10.0949 0.907833C10.0418 0.929832 9.99357 0.962076 9.95292 1.00272C9.91227 1.04337 9.88003 1.09163 9.85803 1.14474C9.83603 1.19785 9.82471 1.25477 9.82471 1.31226C9.82471 1.36974 9.83603 1.42666 9.85803 1.47977C9.88003 1.53288 9.91227 1.58114 9.95292 1.62179L10.9564 2.62475L9.38745 4.19374L7.50948 2.31522C7.42739 2.23313 7.31605 2.18701 7.19995 2.18701C7.08385 2.18701 6.97251 2.23313 6.89042 2.31522C6.80833 2.39732 6.76221 2.50866 6.76221 2.62475C6.76221 2.74085 6.80833 2.85219 6.89042 2.93429L7.23768 3.281L2.64393 7.87476C2.56233 7.95571 2.49763 8.05208 2.4536 8.15827C2.40957 8.26445 2.38708 8.37832 2.38745 8.49327V11.1937L1.20292 12.3777C1.16227 12.4184 1.13003 12.4666 1.10803 12.5197C1.08603 12.5728 1.07471 12.6298 1.07471 12.6873C1.07471 12.7447 1.08603 12.8017 1.10803 12.8548C1.13003 12.9079 1.16227 12.9561 1.20292 12.9968C1.28501 13.0789 1.39635 13.125 1.51245 13.125C1.56994 13.125 1.62686 13.1137 1.67997 13.0917C1.73308 13.0697 1.78133 13.0374 1.82198 12.9968L3.00597 11.8123H5.70643C5.82138 11.8126 5.93526 11.7901 6.04144 11.7461C6.14762 11.7021 6.24399 11.6374 6.32495 11.5558L10.9187 6.96202L11.2654 7.30929C11.3061 7.34993 11.3543 7.38218 11.4074 7.40418C11.4605 7.42618 11.5175 7.4375 11.575 7.4375C11.6324 7.4375 11.6894 7.42618 11.7425 7.40418C11.7956 7.38218 11.8438 7.34993 11.8845 7.30929C11.9251 7.26864 11.9574 7.22038 11.9794 7.16727C12.0014 7.11416 12.0127 7.05724 12.0127 6.99975C12.0127 6.94227 12.0014 6.88535 11.9794 6.83224C11.9574 6.77913 11.9251 6.73087 11.8845 6.69022L10.006 4.81225L11.575 3.24327L12.5779 4.24679C12.66 4.32888 12.7714 4.375 12.8875 4.375C13.0035 4.375 13.1149 4.32888 13.197 4.24679C13.2791 4.16469 13.3252 4.05335 13.3252 3.93725C13.3252 3.82116 13.2791 3.70982 13.197 3.62772ZM5.70643 10.9373H3.26245V8.49327L4.24683 7.5089L5.35917 8.62179C5.39982 8.66244 5.44807 8.69468 5.50118 8.71668C5.55429 8.73868 5.61122 8.75 5.6687 8.75C5.72619 8.75 5.78311 8.73868 5.83622 8.71668C5.88933 8.69468 5.93758 8.66244 5.97823 8.62179C6.01888 8.58114 6.05112 8.53288 6.07312 8.47977C6.09512 8.42666 6.10644 8.36974 6.10644 8.31226C6.10644 8.25477 6.09512 8.19785 6.07312 8.14474C6.05112 8.09163 6.01888 8.04337 5.97823 8.00272L4.86534 6.89038L5.55933 6.1964L6.67167 7.30929C6.75376 7.39138 6.8651 7.4375 6.9812 7.4375C7.0973 7.4375 7.20864 7.39138 7.29073 7.30929C7.37282 7.22719 7.41894 7.11585 7.41894 6.99975C7.41894 6.88366 7.37282 6.77232 7.29073 6.69022L6.17784 5.57788L7.8562 3.89952L10.3002 6.3435L5.70643 10.9373Z" 
      fill={color}
    />
  </svg>
)

const MedicalIcon: React.FC<{ color: string; size: number }> = ({ color, size }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path
      d="M12 2L13.09 8.26L20 9L13.09 9.74L12 16L10.91 9.74L4 9L10.91 8.26L12 2Z"
      fill={color}
    />
    <path
      d="M12 2L13.09 8.26L20 9L13.09 9.74L12 16L10.91 9.74L4 9L10.91 8.26L12 2Z"
      stroke={color}
      strokeWidth="1.5"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </svg>
)

export interface ServiceTypeLogoProps {
  serviceType: 'non-mat' | 'sti' | 'psych' | 'mat' 
  size?: 'small' | 'medium' | 'large'
  className?: string
  onClick?: () => void
}

const ServiceTypeLogo: React.FC<ServiceTypeLogoProps> = ({
  serviceType,
  size = 'medium',
  className,
  onClick
}) => {
  // Size configurations
  const sizeConfig = {
    small: {
      height: 28,
      padding: '4px 12px',
      iconSize: 16,
      fontSize: '12px',
      borderRadius: '14px'
    },
    medium: {
      height: 32,
      padding: '6px 16px',
      iconSize: 18,
      fontSize: '14px',
      borderRadius: '16px'
    },
    large: {
      height: 36,
      padding: '8px 20px',
      iconSize: 20,
      fontSize: '16px',
      borderRadius: '18px'
    }
  }

  const config = sizeConfig[size]

  // Service type configurations
  const serviceConfig = {
    'non-mat': {
      label: 'Non-MAT',
      backgroundColor: COLORS.NON_MAT_BG,
      color: COLORS.NON_MAT_COLOR,
      border: `1px solid ${COLORS.NON_MAT_COLOR}`,
      icon: StethoscopeIcon
    },
    'sti': {
      label: 'STI',
      backgroundColor: COLORS.STI_BG,
      color: COLORS.STI_COLOR,
      border: `1px solid ${COLORS.STI_BORDER}`,
      icon: VirusIcon
    },
    'psych': {
      label: 'Psych',
      backgroundColor: COLORS.PSYCH_BG,
      color: COLORS.PSYCH_COLOR,
      border: `1px solid ${COLORS.PSYCH_BORDER}`,
      icon: BrainIcon
    },
    'mat': {
      label: 'MAT',
      backgroundColor: COLORS.MAT_BG,
      color: COLORS.MAT_COLOR,
      border: `1px solid ${COLORS.MAT_BORDER}`,
      icon: MATIcon
    },
    'fourth-service': {
      label: 'Service',
      backgroundColor: COLORS.FOURTH_SERVICE_BG,
      color: COLORS.FOURTH_SERVICE_COLOR,
      border: `1px solid ${COLORS.FOURTH_SERVICE_BORDER}`,
      icon: MedicalIcon
    }
  }

  const service = serviceConfig[serviceType]
  const IconComponent = service.icon

  return (
    <Box
      className={className}
      onClick={onClick}
      sx={{
        display: 'inline-flex',
        alignItems: 'center',
        gap: 1,
        height: config.height,
        padding: config.padding,
        backgroundColor: service.backgroundColor,
        border: service.border,
        borderRadius: config.borderRadius,
        cursor: onClick ? 'pointer' : 'default',
        transition: 'all 0.2s ease-in-out',
        '&:hover': onClick ? {
          opacity: 0.8,
          transform: 'translateY(-1px)',
          boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)'
        } : {},
        '&:active': onClick ? {
          transform: 'translateY(0px)'
        } : {}
      }}
      role={onClick ? 'button' : undefined}
      tabIndex={onClick ? 0 : undefined}
      onKeyDown={onClick ? (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault()
          onClick()
        }
      } : undefined}
    >
      <IconComponent color={service.color} size={config.iconSize} />
      <Typography
        sx={{
          fontFamily: TYPOGRAPHY.fontFamily.primary,
          fontWeight: TYPOGRAPHY.fontWeight.medium,
          fontSize: config.fontSize,
          color: service.color,
          lineHeight: 1,
          whiteSpace: 'nowrap'
        }}
      >
        {service.label}
      </Typography>
    </Box>
  )
}

export default ServiceTypeLogo
